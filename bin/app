#!/usr/bin/env node

var debug = require('debug')('sensors:app'),
    log   = console.log,
    error = console.error,
    Promise = require('es6-promise').Promise,
    fs = require('fs'),
    _ = require('lodash'),
    radiodan = require('radiodan-client').create();

var Espruino = require('../lib/espruino'),
    Receiver = require('../lib/receiver'),
    ReceiverMock = require('../lib/receiver-mock'),
    rfidReader = require('../lib/rfid'),
    Router   = require('../lib/router'),
    Web      = require('../lib/web');

var serialNum    = process.env.ESPRUINO_SERIAL_NUM,
    rfidSerial   = process.env.RFID_SERIAL_PORT,
    mockEspruinoPort = process.env.MOCK_ESPRUINO,
    port = process.env.PORT,
    player = radiodan.player.get('main');

if (!port) {
  log('Set PORT variable');
  process.exit(1);
}

if (mockEspruinoPort) {
  findAvailableEspruino = function () { return Promise.resolve(mockEspruinoPort); };
  Receiver = ReceiverMock;
}

debug('Listen on port', port);

var web = new Web(port),
    router,
    receiver;

if (!rfidSerial) {
  log('RFID_SERIAL_PORT not set, will not connect to USB/SERIAL RFID reader');
} else {
  rfid = rfidReader(rfidSerial);
  rfid.on('tag:added', function (id) {
    log('RFID tag added: ', id);
    web.broadcast('sensor', { type: 'rfid', value: id });
  });
  rfid.on('tag:removed', function (id) {
    log('RFID tag removed: ', id);
    web.broadcast('sensor', { type: 'rfid', value: null });
  });
}

var serialPromise = findAvailableEspruino(serialNum);
serialPromise
  .then(function (serialPort) {
    debug('Connecting receiver on port: ', serialPort);
    receiver = new Receiver(serialPort);

    // Create a router, the interface between
    // radiodan player, web UI and espruino
    router = new Router(player, web, receiver);

    // TODO: Move into router
    receiver.on('targets', function (targets) {
      debug('TARGETS', targets);
      router.updateTargetStates(targets);
    });
    receiver.on('disconnect', gracefulExit);
  })
  .catch(errorAndExit);

process
  .on('SIGINT', gracefulExit)
  .on('SIGTERM', gracefulExit);

function gracefulExit() {
  // disconnect open serial ports
  // via Espruino.closeAll() ?
  if (receiver) { receiver.close(); }
  process.exit();
}

function findAvailableEspruino(serialNum) {
  var finderPromise;

  if (serialNum) {
    finderPromise = Espruino.findBySerialNumber(serialNum);
  } else {
    finderPromise = Espruino.findEspruinos().then(_.first);
  }

  return finderPromise
    .then(function (serialPort) {
      if (!serialPort) {
        throw new Error('No serial port found');
      } else {
        return serialPort;
      }
    })
    .catch(errorAndExit);
}

function error(err) {
  console.error(err.stack);
}

function errorAndExit(err) {
  error(err);
  gracefulExit();
}
